on:
  push:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * 0'
jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-18.04
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_id }}
          draft: true
  apm821xx-sata:
    name: apm821xx-sata
    runs-on: ubuntu-18.04
    needs: create-release
    continue-on-error: true
    env:
      arch: apm821xx-sata
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/apm821xx/sata/openwrt-sdk-19.07.3-apm821xx-sata_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  pistachio-generic:
    name: pistachio-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: pistachio-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/pistachio/generic/openwrt-sdk-19.07.3-pistachio_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  x86-legacy:
    name: x86-legacy
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: x86-legacy
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/x86/legacy/openwrt-sdk-19.07.3-x86-legacy_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ramips-rt3883:
    name: ramips-rt3883
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ramips-rt3883
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ramips/rt3883/openwrt-sdk-19.07.3-ramips-rt3883_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  zynq-generic:
    name: zynq-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: zynq-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/zynq/generic/openwrt-sdk-19.07.3-zynq_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  x86-geode:
    name: x86-geode
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: x86-geode
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/x86/geode/openwrt-sdk-19.07.3-x86-geode_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  octeontx-generic:
    name: octeontx-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: octeontx-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/octeontx/generic/openwrt-sdk-19.07.3-octeontx_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  sunxi-cortexa8:
    name: sunxi-cortexa8
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: sunxi-cortexa8
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/sunxi/cortexa8/openwrt-sdk-19.07.3-sunxi-cortexa8_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  tegra-generic:
    name: tegra-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: tegra-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/tegra/generic/openwrt-sdk-19.07.3-tegra_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mediatek-mt7622:
    name: mediatek-mt7622
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: mediatek-mt7622
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mediatek/mt7622/openwrt-sdk-19.07.3-mediatek-mt7622_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mediatek-mt7623:
    name: mediatek-mt7623
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: mediatek-mt7623
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mediatek/mt7623/openwrt-sdk-19.07.3-mediatek-mt7623_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  sunxi-cortexa7:
    name: sunxi-cortexa7
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: sunxi-cortexa7
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/sunxi/cortexa7/openwrt-sdk-19.07.3-sunxi-cortexa7_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mxs-generic:
    name: mxs-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: mxs-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mxs/generic/openwrt-sdk-19.07.3-mxs_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mpc85xx-p2020:
    name: mpc85xx-p2020
    runs-on: ubuntu-18.04
    needs: create-release
    continue-on-error: true
    env:
      arch: mpc85xx-p2020
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mpc85xx/p2020/openwrt-sdk-19.07.3-mpc85xx-p2020_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  octeon-generic:
    name: octeon-generic
    runs-on: ubuntu-18.04
    needs: create-release
    continue-on-error: true
    env:
      arch: octeon-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/octeon/generic/openwrt-sdk-19.07.3-octeon_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  oxnas-ox820:
    name: oxnas-ox820
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: oxnas-ox820
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/oxnas/ox820/openwrt-sdk-19.07.3-oxnas-ox820_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  apm821xx-nand:
    name: apm821xx-nand
    runs-on: ubuntu-18.04
    needs: create-release
    continue-on-error: true
    env:
      arch: apm821xx-nand
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/apm821xx/nand/openwrt-sdk-19.07.3-apm821xx-nand_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  layerscape-armv8_64b:
    name: layerscape-armv8_64b
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: layerscape-armv8_64b
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/layerscape/armv8_64b/openwrt-sdk-19.07.3-layerscape-armv8_64b_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  malta-be:
    name: malta-be
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: malta-be
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/malta/be/openwrt-sdk-19.07.3-malta-be_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  omap-generic:
    name: omap-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: omap-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/omap/generic/openwrt-sdk-19.07.3-omap_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  layerscape-armv7:
    name: layerscape-armv7
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: layerscape-armv7
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/layerscape/armv7/openwrt-sdk-19.07.3-layerscape-armv7_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mpc85xx-generic:
    name: mpc85xx-generic
    runs-on: ubuntu-18.04
    needs: create-release
    continue-on-error: true
    env:
      arch: mpc85xx-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mpc85xx/generic/openwrt-sdk-19.07.3-mpc85xx-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mvebu-cortexa72:
    name: mvebu-cortexa72
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: mvebu-cortexa72
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mvebu/cortexa72/openwrt-sdk-19.07.3-mvebu-cortexa72_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mpc85xx-p1020:
    name: mpc85xx-p1020
    runs-on: ubuntu-18.04
    needs: create-release
    continue-on-error: true
    env:
      arch: mpc85xx-p1020
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mpc85xx/p1020/openwrt-sdk-19.07.3-mpc85xx-p1020_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mvebu-cortexa53:
    name: mvebu-cortexa53
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: mvebu-cortexa53
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mvebu/cortexa53/openwrt-sdk-19.07.3-mvebu-cortexa53_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  samsung-s5pv210:
    name: samsung-s5pv210
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: samsung-s5pv210
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/samsung/s5pv210/openwrt-sdk-19.07.3-samsung-s5pv210_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  x86-64:
    name: x86-64
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: x86-64
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/x86/64/openwrt-sdk-19.07.3-x86-64_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  x86-generic:
    name: x86-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: x86-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/x86/generic/openwrt-sdk-19.07.3-x86-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ramips-rt288x:
    name: ramips-rt288x
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ramips-rt288x
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ramips/rt288x/openwrt-sdk-19.07.3-ramips-rt288x_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  rb532-generic:
    name: rb532-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: rb532-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/rb532/generic/openwrt-sdk-19.07.3-rb532_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  mvebu-cortexa9:
    name: mvebu-cortexa9
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: mvebu-cortexa9
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/mvebu/cortexa9/openwrt-sdk-19.07.3-mvebu-cortexa9_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ramips-mt7621:
    name: ramips-mt7621
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ramips-mt7621
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ramips/mt7621/openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ramips-rt305x:
    name: ramips-rt305x
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ramips-rt305x
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ramips/rt305x/openwrt-sdk-19.07.3-ramips-rt305x_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ramips-mt76x8:
    name: ramips-mt76x8
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ramips-mt76x8
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ramips/mt76x8/openwrt-sdk-19.07.3-ramips-mt76x8_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  sunxi-cortexa53:
    name: sunxi-cortexa53
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: sunxi-cortexa53
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/sunxi/cortexa53/openwrt-sdk-19.07.3-sunxi-cortexa53_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ramips-mt7620:
    name: ramips-mt7620
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ramips-mt7620
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ramips/mt7620/openwrt-sdk-19.07.3-ramips-mt7620_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  lantiq-xway_legacy:
    name: lantiq-xway_legacy
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: lantiq-xway_legacy
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/lantiq/xway_legacy/openwrt-sdk-19.07.3-lantiq-xway_legacy_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  lantiq-xway:
    name: lantiq-xway
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: lantiq-xway
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/lantiq/xway/openwrt-sdk-19.07.3-lantiq-xway_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ipq806x-generic:
    name: ipq806x-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ipq806x-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ipq806x/generic/openwrt-sdk-19.07.3-ipq806x-generic_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  lantiq-falcon:
    name: lantiq-falcon
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: lantiq-falcon
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/lantiq/falcon/openwrt-sdk-19.07.3-lantiq-falcon_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ipq40xx-generic:
    name: ipq40xx-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ipq40xx-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ipq40xx/generic/openwrt-sdk-19.07.3-ipq40xx-generic_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  cns3xxx-generic:
    name: cns3xxx-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: cns3xxx-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/cns3xxx/generic/openwrt-sdk-19.07.3-cns3xxx_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  brcm47xx-mips74k:
    name: brcm47xx-mips74k
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: brcm47xx-mips74k
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/brcm47xx/mips74k/openwrt-sdk-19.07.3-brcm47xx-mips74k_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  brcm2708-bcm2710:
    name: brcm2708-bcm2710
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: brcm2708-bcm2710
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/brcm2708/bcm2710/openwrt-sdk-19.07.3-brcm2708-bcm2710_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ath79-nand:
    name: ath79-nand
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ath79-nand
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ath79/nand/openwrt-sdk-19.07.3-ath79-nand_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  brcm47xx-legacy:
    name: brcm47xx-legacy
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: brcm47xx-legacy
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/brcm47xx/legacy/openwrt-sdk-19.07.3-brcm47xx-legacy_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  brcm2708-bcm2709:
    name: brcm2708-bcm2709
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: brcm2708-bcm2709
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/brcm2708/bcm2709/openwrt-sdk-19.07.3-brcm2708-bcm2709_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ath25-generic:
    name: ath25-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ath25-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ath25/generic/openwrt-sdk-19.07.3-ath25_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  brcm2708-bcm2708:
    name: brcm2708-bcm2708
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: brcm2708-bcm2708
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/brcm2708/bcm2708/openwrt-sdk-19.07.3-brcm2708-bcm2708_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ath79-tiny:
    name: ath79-tiny
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ath79-tiny
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ath79/tiny/openwrt-sdk-19.07.3-ath79-tiny_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  bcm53xx-generic:
    name: bcm53xx-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: bcm53xx-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/bcm53xx/generic/openwrt-sdk-19.07.3-bcm53xx_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  imx6-generic:
    name: imx6-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: imx6-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/imx6/generic/openwrt-sdk-19.07.3-imx6_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ath79-generic:
    name: ath79-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ath79-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ath79/generic/openwrt-sdk-19.07.3-ath79-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  kirkwood-generic:
    name: kirkwood-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: kirkwood-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/kirkwood/generic/openwrt-sdk-19.07.3-kirkwood_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  brcm47xx-generic:
    name: brcm47xx-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: brcm47xx-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/brcm47xx/generic/openwrt-sdk-19.07.3-brcm47xx-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  gemini-generic:
    name: gemini-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: gemini-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/gemini/generic/openwrt-sdk-19.07.3-gemini_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  brcm63xx-generic:
    name: brcm63xx-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: brcm63xx-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/brcm63xx/generic/openwrt-sdk-19.07.3-brcm63xx-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  brcm63xx-smp:
    name: brcm63xx-smp
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: brcm63xx-smp
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/brcm63xx/smp/openwrt-sdk-19.07.3-brcm63xx-smp_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  lantiq-xrx200:
    name: lantiq-xrx200
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: lantiq-xrx200
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/lantiq/xrx200/openwrt-sdk-19.07.3-lantiq-xrx200_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  lantiq-ase:
    name: lantiq-ase
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: lantiq-ase
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/lantiq/ase/openwrt-sdk-19.07.3-lantiq-ase_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  armvirt-64:
    name: armvirt-64
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: armvirt-64
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/armvirt/64/openwrt-sdk-19.07.3-armvirt-64_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  at91-sama5:
    name: at91-sama5
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: at91-sama5
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/at91/sama5/openwrt-sdk-19.07.3-at91-sama5_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  armvirt-32:
    name: armvirt-32
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: armvirt-32
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/armvirt/32/openwrt-sdk-19.07.3-armvirt-32_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  at91-sam9x:
    name: at91-sam9x
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: at91-sam9x
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/at91/sam9x/openwrt-sdk-19.07.3-at91-sam9x_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ar71xx-tiny:
    name: ar71xx-tiny
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ar71xx-tiny
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ar71xx/tiny/openwrt-sdk-19.07.3-ar71xx-tiny_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ar71xx-nand:
    name: ar71xx-nand
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ar71xx-nand
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ar71xx/nand/openwrt-sdk-19.07.3-ar71xx-nand_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ar71xx-mikrotik:
    name: ar71xx-mikrotik
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ar71xx-mikrotik
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ar71xx/mikrotik/openwrt-sdk-19.07.3-ar71xx-mikrotik_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  arc770-generic:
    name: arc770-generic
    runs-on: ubuntu-18.04
    needs: create-release
    continue-on-error: true
    env:
      arch: arc770-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/arc770/generic/openwrt-sdk-19.07.3-arc770-generic_gcc-8.3.0_uClibc.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  archs38-generic:
    name: archs38-generic
    runs-on: ubuntu-18.04
    needs: create-release
    continue-on-error: true
    env:
      arch: archs38-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/archs38/generic/openwrt-sdk-19.07.3-archs38-generic_gcc-8.3.0_uClibc.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  ar71xx-generic:
    name: ar71xx-generic
    runs-on: ubuntu-18.04
    needs: create-release
    env:
      arch: ar71xx-generic
      url: 'https://downloads.openwrt.org/releases/19.07.3/targets/ar71xx/generic/openwrt-sdk-19.07.3-ar71xx-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz'
    steps:
    - uses: actions/checkout@v2
    - name: login
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
    - name: build
      run: docker build --build-arg URL=${{ env.url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
    - name: push
      run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
    - name: output
      run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
    - name: release
      run: zip -r ${{ env.arch }} ${{ env.arch }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.arch }}
        path: ${{ env.arch }}
    - name: upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.create-release.upload_url }}
        asset_path: ./${{ env.arch }}.zip
        asset_name: ${{ env.arch }}.zip
        asset_content_type: application/zip
  publish-release:
    name: publish-release
    runs-on: ubuntu-18.04
    needs: 
      - apm821xx-sata
      - pistachio-generic
      - x86-legacy
      - ramips-rt3883
      - zynq-generic
      - x86-geode
      - octeontx-generic
      - sunxi-cortexa8
      - tegra-generic
      - mediatek-mt7622
      - mediatek-mt7623
      - sunxi-cortexa7
      - mxs-generic
      - mpc85xx-p2020
      - octeon-generic
      - oxnas-ox820
      - apm821xx-nand
      - layerscape-armv8_64b
      - malta-be
      - omap-generic
      - layerscape-armv7
      - mpc85xx-generic
      - mvebu-cortexa72
      - mpc85xx-p1020
      - mvebu-cortexa53
      - samsung-s5pv210
      - x86-64
      - x86-generic
      - ramips-rt288x
      - rb532-generic
      - mvebu-cortexa9
      - ramips-mt7621
      - ramips-rt305x
      - ramips-mt76x8
      - sunxi-cortexa53
      - ramips-mt7620
      - lantiq-xway_legacy
      - lantiq-xway
      - ipq806x-generic
      - lantiq-falcon
      - ipq40xx-generic
      - cns3xxx-generic
      - brcm47xx-mips74k
      - brcm2708-bcm2710
      - ath79-nand
      - brcm47xx-legacy
      - brcm2708-bcm2709
      - ath25-generic
      - brcm2708-bcm2708
      - ath79-tiny
      - bcm53xx-generic
      - imx6-generic
      - ath79-generic
      - kirkwood-generic
      - brcm47xx-generic
      - gemini-generic
      - brcm63xx-generic
      - brcm63xx-smp
      - lantiq-xrx200
      - lantiq-ase
      - armvirt-64
      - at91-sama5
      - armvirt-32
      - at91-sam9x
      - ar71xx-tiny
      - ar71xx-nand
      - ar71xx-mikrotik
      - arc770-generic
      - archs38-generic
      - ar71xx-generic
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create-release.outputs.create-release.id }}
